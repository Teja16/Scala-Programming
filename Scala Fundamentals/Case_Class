Case Class:

When a case class is declared, the Scala complier automatically generates a default constructor, an equals, and hashCode method, a copy constructor and an accessor for each attribute.

Benefits of case class:

- An apply method is generated by default which takes care of object construction, so you don’t need to use the new keyword to create a new instance of the class.
- Accessor methods are generated for each constructor parameter, because case class constructor parameters are public val fields by default.
- (You won’t use var fields in this book, but if you did, mutator methods would also be generated for constructor parameters declared as var.)
- An unapply method is generated, which makes it easy to use case classes in match expressions. This is huge for Scala/FP.
- As you’ll see in the next lesson, a copy method is generated. I never use this in Scala/OOP code, you’ll use it all the time in Scala/FP.
- equals and hashCode methods are generated, which lets you compare objects and easily use them as keys in maps (and sets).
- A default toString method is generated, which is helpful for debugging.

case class Person(name: String, age: Int)

val mikaelNew = new Person("Mikael", 41)

val mikael = Person("Mikael", 41)
// == compares values, not references
//Instances of case classes are compared by structure and not by reference:
mikael == mikaelNew
// == is exactly the same as .equals
mikael.equals(mikaelNew)

val name = mikael.name
//When you create a case class with parameters, the parameters are public val
// a case class is immutable. The line below does not compile:
//mikael.name = "Nicolas"
// you need to create a new instance using copy
val nicolas = mikael.copy(name = "Nicolas")

Case classes are good for modeling immutable data
